; read in text from a file and splits it into individual words
(define (generate-lexemes filename)
  (let ((file (open-input-file filename))
        (line 0))
    (define (inc-line char)
      (set! line (+ 1 line)))
    (define (num-word char-list)
      (let ((char (peek-char file)))
        (cond ((num-char? char)
               (begin
                 (set! (append char-list (read-char file)))
                 (num char-list)))
              ((newline? char)
               (begin
                 (inc-line (read-char file))
                 (list->string char-list)))
              ((or (eof-object? char)
                   (op-end-char? char))
               (list->string char-list))
              (else (error "bad num char at line " line)))))
    (define (str-word char-list)
      (let ((char (peek-char file)))
        (cond ((str-quote? char)
               (begin
                 (read-char file)
                 (list->string char-list)))
              ((eof-object? char) (error "unclosed string at line " line))
              ((esc-char? char)
               (begin
                 (set! char-list (append char-list (read-char file)))
                 (if (str-quote? (peek-char file))
                     (set! char-list (append char-list (read-char file))))
                 (str char-list)))
              (else
               (begin
                 (set! char-list (append char-list (read-char file)))
                 (str char-list))))))
    (define (char-word char-list)
      (let ((char (peek-char file)))
        (cond ((alpha-numeric-char? char)
               (begin
                 (set! char-list (append char-list (read-char file)))
                 (char-word char-list)))
              ((char-quote? char)
               (begin
                 (read-char file)
                 (list->string char-list)))
              ((eof-object? char) 
               (error "unclosed character at line " line))
              (else (error "invalid char character at line " line)))))
    (define (word char-list)
      (let ((char (peek-char file)))
        (cond ((word-inner-char? char)
               (begin
                 (set! char-list (append char-list (read-char file)))
                 (word char-list))
               ((newline? char)
                (begin
                  (inc-line (read-char file))
                  (list->string char-list)))
               ((or (eof-object? char)
                    (op-start-char? char)
                    (op-end-char? char)
                    (char-whitespace? char))
                (list->string char-list))
               (else (error "bad word char at line " line))))))
    (define split-str
      (let ((char (peek-char file)))
        (cond ((singleton? char)
                 (cons (list->string (read-char file)) (split-str)))
              ((or (label-start-char? char) (word-outer-char? char))
                 (cons ((word (list (read-char file)))) (split-str)))
              ((num-char? char)
                 (cons words (num-word (list (read-char file))) (split-str)))
              ((newline? char)
               (begin
                 (inc-line (read-char file))
                 (split-str)))
              ((char-whitespace? char)
               (begin
                 (read-char file)
                 (split-str)))
              ((eof-object? char) '()))))
    (split-str)))

; define procs to test what part of the language a char belongs to
(define (word-outer-char? char) 
  (or (char=? char #\_)
      (char-alphabetic? char)))
(define (word-inner-char? char) 
  (or (char-alphabetic? char) 
      (char-numeric? char) 
      (char=? #\_ char)))
(define (word-end-char? char) (char=? char #\'))
(define (str-quote? char) (char=? char #\"))
(define (esc-char? char) (char=? char #\\))
(define (char-quote? char) (char=? char #\'))
(define (op-start-char? char) (char=? char #\())
(define (op-end-char? char) (char=? char #\)))
(define (num-char? char) (char-numeric? char))
(define (special-char? char)
  (or (char=? char #\*)
      (char=? char #\+)
      (char=? char #\-)
      (char=? char #\/)
      (char=? char #\%)
      (char=? char #\^)
      (char=? char #\=)))
(define (alpha-numeric-char? char) 
  (or (char-alphabetic? char)
      (char-numeric? char)))
(define (label-start-char? char) (char=? char #\@))
(define (label-open-char? char) (char=? char #\{))
(define (label-close-char? char) (char=? char #\}))
(define (label-word-outer-char? char) (char-alphabetic? char))
(define (label-word-inner-char? char) (alpha-numeric-char? char))
(define (exp-close-char? char) (char=? char #\;))
(define (newline? char) (char=? char #\newline))
(define (singleton? char)
  (or (special-char? char)
      (label-open-char? char)
      (label-close-char? char)
      (op-start-char? char)
      (op-end-char? char)
      (exp-close-char? char)))

