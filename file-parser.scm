;; read in text from a file and splits it into individual words
(define (generate-lexemes filename)
  (let ((file (open-input-file filename))
        (line 0))
    (define (inc-line char)
      (set! line (+ 1 line)))
    (define (num-word char-list)
      (let ((char (peek-char file)))
        (cond ((or (eof-object? char)
                   (op-end-char? char))
               (list->string char-list))
              ((num-char? char)
               (num (append char-list (list (read-char file)))))
              ((newline? char)
               (inc-line (read-char file))
               (list->string char-list))
              (else (error "bad num char at line " line)))))
    (define (str-word char-list)
      (let ((char (peek-char file)))
        (display char)
        (cond ((eof-object? char) (error "unclosed string at line " line))
              ((str-quote? char)
               (read-char file)
               (list->string char-list))
              (else
               (str-word (append char-list (list (read-char file))))))))
    (define (char-word char-list)
      (let ((char (peek-char file)))
        (cond ((eof-object? char)
               (error "unclosed character at line " line))
              ((alpha-numeric-char? char) 
               (char-word (append char-list (list (read-char file)))))
              ((char-quote? char)
               (read-char file)
               (list->string char-list))
              (else (error "invalid char character at line " line)))))
    (define (word char-list)
      (let ((char (peek-char file)))
        (cond ((or (eof-object? char)
                   (op-start-char? char)
                   (op-end-char? char)
                   (char-whitespace? char)
                   (singleton? char))
               (list->string char-list))
              ((word-inner-char? char)
               (word (append char-list (list (read-char file)))))
              ((newline? char)
               (inc-line (read-char file))
               (list->string char-list))
              (else (error "bad word char at line " line)))))
    (define (split-str)
      (let ((char (peek-char file)))
        (cond ((eof-object? char) '())
              ((singleton? char)
               (cons (list->string (list (read-char file))) (split-str)))
              ((or (label-start-char? char) (word-outer-char? char))
               (cons (word (list (read-char file))) (split-str)))
              ((num-char? char)
               (cons (num-word (list (read-char file))) (split-str)))
              ((str-quote? char)
               (cons (str-word (list (read-char file))) (split-str)))
              ((char-quote? char)
               (cons (char-word (list (read-char file))) (split-str)))
              ((newline? char)
               (inc-line (read-char file))
               (split-str))
              ((char-whitespace? char)
               (read-char file)
               (split-str)))))
    (split-str)))

;; define procs to test what part of the language a char belongs to
(define (word-outer-char? char) 
    (or (char=? char #\_)
        (char-alphabetic? char)))
(define (word-inner-char? char) 
    (or (char-alphabetic? char) 
        (char-numeric? char) 
        (char=? #\_ char)))
(define (word-end-char? char) (char=? char #\'))
(define (str-quote? char) (char=? char #\"))
(define (esc-char? char) (char=? char #\\))
(define (char-quote? char) (char=? char #\'))
(define (op-start-char? char) (char=? char #\())
(define (op-end-char? char) (char=? char #\)))
(define (num-char? char) (char-numeric? char))
(define (special-char? char)
    (or (char=? char #\*)
        (char=? char #\+)
        (char=? char #\-)
        (char=? char #\/)
        (char=? char #\%)
        (char=? char #\^)
        (char=? char #\=)))
(define (alpha-numeric-char? char) 
    (or (char-alphabetic? char)
        (char-numeric? char)))
(define (label-start-char? char) (char=? char #\@))
(define (label-open-char? char) (char=? char #\{))
(define (label-close-char? char) (char=? char #\}))
(define (label-word-outer-char? char) (char-alphabetic? char))
(define (label-word-inner-char? char) (alpha-numeric-char? char))
(define (exp-close-char? char) (char=? char #\;))
(define (newline? char) (char=? char #\newline))
(define (singleton? char)
    (or (special-char? char)
        (label-open-char? char)
        (label-close-char? char)
        (op-start-char? char)
        (op-end-char? char)
        (exp-close-char? char)))


